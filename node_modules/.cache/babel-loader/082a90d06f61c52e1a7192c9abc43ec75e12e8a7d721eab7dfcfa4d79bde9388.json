{"ast":null,"code":"var _jsxFileName = \"/Users/jungsunbeen/Desktop/lucaus-client/src/context/MenuContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from 'react';\n\n// Context 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MenuContext = /*#__PURE__*/createContext(undefined);\n\n// Provider 생성\nexport const MenuProvider = ({\n  children\n}) => {\n  _s();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const toggleMenu = () => {\n    setIsMenuOpen(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(MenuContext.Provider, {\n    value: {\n      isMenuOpen,\n      toggleMenu\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n};\n\n// Hook 생성 (더 간편하게 사용)\n_s(MenuProvider, \"vK10R+uCyHfZ4DZVnxbYkMWJB8g=\");\n_c = MenuProvider;\nexport const useMenu = () => {\n  _s2();\n  const context = useContext(MenuContext);\n  if (!context) {\n    throw new Error('useMenu must be used within a MenuProvider');\n  }\n  return context;\n};\n_s2(useMenu, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"MenuProvider\");","map":{"version":3,"names":["createContext","useContext","useState","jsxDEV","_jsxDEV","MenuContext","undefined","MenuProvider","children","_s","isMenuOpen","setIsMenuOpen","toggleMenu","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMenu","_s2","context","Error","$RefreshReg$"],"sources":["/Users/jungsunbeen/Desktop/lucaus-client/src/context/MenuContext.tsx"],"sourcesContent":["import { createContext, useContext, useState, ReactNode } from 'react';\n\n// Context 생성\ninterface MenuContextType {\n  isMenuOpen: boolean;\n  toggleMenu: () => void;\n}\n\nconst MenuContext = createContext<MenuContextType | undefined>(undefined);\n\n// Provider 생성\nexport const MenuProvider = ({ children }: { children: ReactNode }) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const toggleMenu = () => {\n    setIsMenuOpen((prev) => !prev);\n  };\n\n  return <MenuContext.Provider value={{ isMenuOpen, toggleMenu }}>{children}</MenuContext.Provider>;\n};\n\n// Hook 생성 (더 간편하게 사용)\nexport const useMenu = () => {\n  const context = useContext(MenuContext);\n  if (!context) {\n    throw new Error('useMenu must be used within a MenuProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;;AAEtE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA,MAAMC,WAAW,gBAAGL,aAAa,CAA8BM,SAAS,CAAC;;AAEzE;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAkC,CAAC,KAAK;EAAAC,EAAA;EACrE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMU,UAAU,GAAGA,CAAA,KAAM;IACvBD,aAAa,CAAEE,IAAI,IAAK,CAACA,IAAI,CAAC;EAChC,CAAC;EAED,oBAAOT,OAAA,CAACC,WAAW,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,UAAU;MAAEE;IAAW,CAAE;IAAAJ,QAAA,EAAEA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AACnG,CAAC;;AAED;AAAAV,EAAA,CAVaF,YAAY;AAAAa,EAAA,GAAZb,YAAY;AAWzB,OAAO,MAAMc,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGtB,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACkB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}